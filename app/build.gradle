apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.jakewharton.butterknife'

apply plugin: 'com.google.gms.google-services'

android {
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    configurations {
        all*.exclude group: 'com.android.volley'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 28
    buildToolsVersion "29.0.1"

    def package_name = "id.akakom.bimo.shareloc"
    def app_alias_name = "Shareloc"
    def versionPropsFile = file('version.properties')

    flavorDimensions "default"
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def runTasks = gradle.startParameter.taskNames

        if (runTasks.grep(':app:assembleRelease')) {

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(
                            output.outputFile.parent,
                            output.outputFile.name.replace(".apk", "-${variant.versionName}.apk"))
                }
            }
        }

        def version_major = versionProps['VERSION_MAJOR'].toInteger()
        def version_minor = versionProps['VERSION_MINOR'].toInteger()
        def version_maintenance = versionProps['VERSION_MAINTENANCE'].toInteger()
        def version_build = versionProps['VERSION_BUILD'].toInteger() + 1
        def version_code = versionProps['VERSION_CODE'].toInteger()

        versionProps['VERSION_MAJOR'] = version_major.toString()
        versionProps['VERSION_MINOR'] = version_minor.toString()
        versionProps['VERSION_MAINTENANCE'] = version_maintenance.toString()
        versionProps['VERSION_BUILD'] = version_build.toString()
        versionProps['VERSION_CODE'] = version_code.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId package_name
            minSdkVersion 19
            multiDexEnabled true
            targetSdkVersion 28
            versionCode version_code
            versionName "${version_major}.${version_minor}.${version_maintenance}.${version_build}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

            def addUrl = { constantName, constantValue ->
                buildConfigField "String", "${constantName}", "\"${constantValue}\""
            }
            addUrl("base_url", "http://tutorial-sourcecode.com/shareloc")
            addUrl("api", "/")
            addUrl("login", "api/login")
            addUrl("register", "api/register")
            addUrl("allRiwayat", "api/shareloc")
            addUrl("allRiwayatMember", "api/shareloc/riwayatmember")
            addUrl("detailShareloc", "api/shareloc/getdetail")
            addUrl("locationsShareloc", "api/shareloc/getlocations")
            addUrl("memberShareloc", "api/shareloc/getmembers")
            addUrl("share", "api/shareloc/share")
            addUrl("addPartisipan", "api/shareloc/addpartisipan")
            addUrl("stopShare", "api/shareloc/stopshare")
            addUrl("addLocation", "api/shareloc/addlocation")
        }

        signingConfigs {
            release {
                storeFile file('/Users/al/AndroidStudioProjects/Shareloc/key_legalisasi.jks')
                storePassword 'dev@legalisasi'
                keyAlias 'KeyLegalisasi'
                keyPassword 'dev@legalisasi'
            }
            debug {

            }
        }

        productFlavors {
            development {
                applicationId package_name
                versionName "${version_major}.${version_minor}.${version_maintenance}.${version_build}"
                def makeAConstant = { constantName, constantValue ->
                    manifestPlaceholders += [(constantName): constantValue]
                    buildConfigField "String", "${constantName}", "\"${constantValue}\""
                }
                makeAConstant("base_api", "http://tutorial-sourcecode.com/shareloc")
//                resValue "string", "app_name", "Dev " + app_alias_name
                resValue "string", "app_name", "" + app_alias_name
                makeAConstant("application_name", "" + app_alias_name)
                /*resValue "string", "google_maps_key",
                        (project.findProperty("GOOGLE_MAPS_API_KEY") ?: "")*/
                manifestPlaceholders = [
                        appIcon: "@mipmap/ic_launcher"
                ]
//                multiDexEnabled true
            }

            production {
                applicationId package_name
                versionName "${version_major}.${version_minor}.${version_maintenance}"
                def makeAConstant = { constantName, constantValue ->
                    manifestPlaceholders += [(constantName): constantValue]
                    buildConfigField "String", "${constantName}", "\"${constantValue}\""
                }
                makeAConstant("base_api", "http://tutorial-sourcecode.com/shareloc")
                makeAConstant("application_name", app_alias_name)
                resValue "string", "app_name", app_alias_name
                /*resValue "string", "google_maps_key",
                        (project.findProperty("GOOGLE_MAPS_API_KEY") ?: "")*/
                manifestPlaceholders = [
                        appIcon: "@mipmap/ic_launcher"
                ]
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.github.smarteist:autoimageslider:1.3.2'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.github.egovgt:gmsframeworkx-lite:1.0.7'
//    implementation 'com.github.egovgt:gmsframework-lite:1.0'
    implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
    implementation 'joda-time:joda-time:2.10.5'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    implementation 'com.jakewharton:butterknife:10.1.0'
    implementation 'com.github.gcacace:signature-pad:1.2.1'

    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'

    implementation 'com.google.firebase:firebase-auth:19.2.0'
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    implementation 'com.facebook.android:facebook-login:[5,6)'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    implementation 'com.android.support:multidex:1.0.3'

    //google
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation "com.google.android.libraries.places:places-compat:2.1.0"
    implementation 'com.google.maps.android:android-maps-utils:0.5'
}
